Index: package/base-files/files/lib/network/networkmode.sh
===================================================================
--- package/base-files/files/lib/network/networkmode.sh	(revision 0)
+++ package/base-files/files/lib/network/networkmode.sh	(revision 0)
@@ -0,0 +1,358 @@
+#!/bin/sh
+# Copyright (C) 2006 OpenWrt.org
+
+# DEBUG="echo"
+
+switch_network_mode() {
+  local mode="$1"
+  local ssid="$2"
+  local key="$3"
+
+  AP_ADDR=$(uci get powertools.@system[0].address)
+  UID=$(uci get powertools.@system[0].uid)
+  RELEASE=$(uci get powertools.@system[0].release)
+  if  [ "$AP_ADDR" == "" ]; then
+    case $RELEASE in
+      "nas") AP_ADDR="172.16.0.1" ;;
+      "pulseaudio") AP_ADDR="172.16.10.1" ;;
+    esac
+  fi
+  current_ssid=$(uci get wireless.@wifi-iface[1].ssid)
+  if [ "$ssid" != "" ]; then
+    if [ "$current_ssid" != "$ssid" ]; then
+      uci set wireless.@wifi-iface[1].ssid="$ssid"
+    fi
+  fi
+  current_key=$(uci get wireless.@wifi-iface[1].key)
+  if [ "$key" != "" ]; then
+    if [ "$current_key" != "$key" ]; then
+      uci set wireless.@wifi-iface[1].key="$key"
+    fi
+  fi
+  ssid=$(uci get wireless.@wifi-iface[1].ssid)
+  key=$(uci get wireless.@wifi-iface[1].key)
+  wifi_disabled=$(uci get wireless.@wifi-iface[1].disabled)
+  if [ "$ssid" == "Disabled" ]; then
+    if [ "$wifi_disabled" != "1" ]; then 
+      uci set wireless.@wifi-iface[1].disabled=1
+    fi
+  else
+    if [ "$wifi_disabled" != "0" ]; then
+      uci set wireless.@wifi-iface[1].disabled=0
+    fi
+  fi
+  if [ "$mode" == "auto" ]; then
+    WIFI_UID=$(cat /sys/class/net/wlan0/address | awk -F':' '{print $5$6}')
+    case $RELEASE in
+      "nas") mode=2
+               HOSTNAME=OpenWrt-NAS-"$WIFI_UID"
+             ;;
+      "pulseaudio") mode=1
+                      HOSTNAME=OpenWrt-PulseAudio-"$WIFI_UID"
+                    ;;
+    esac
+  fi
+  if [ "$UID" != "" ]; then
+    RELEASE="$RELEASE"-"$UID"
+  fi
+  if [ "$mode" != "" ]; then
+  uci set powertools.@system[0].mode=$mode
+  CURRENT_HOSTNAME=$(uci get system.@system[0].hostname)
+  if [ "$CURRENT_HOSTNAME" != "$HOSTNAME" ]; then
+    if [ "$HOSTNAME" != "" ]; then
+      uci set system.@system[0].hostname=$HOSTNAME
+    fi
+  fi
+  hostname_ip=$(grep ^"$AP_ADDR $RELEASE"$ /etc/hosts | awk '{print $1}')
+    if [ "$hostname_ip" != "$AP_ADDR" ]; then
+      if [ "$hostname_ip" != "" ]; then
+        sed -e "s/.*'$RELEASE'/$AP_ADDR '$RELEASE'/" -i /etc/hosts
+      else
+        echo "$AP_ADDR $RELEASE" >> /etc/hosts
+      fi
+    fi
+  fi
+  case $mode in
+    1) ## eth0 + wlan0 as lan, wlan1 and usb0 as two wans
+  
+      ## set network
+  
+      uci delete network.wan
+      uci delete network.lan
+      uci delete network.wifi
+      uci delete network.usb
+  
+      uci set network.lan=interface
+      uci set network.lan.ifname="eth0 wlan0"
+      uci set network.lan.type=bridge
+      uci set network.lan.proto=static
+      uci set network.lan.ipaddr=$AP_ADDR
+      uci set network.lan.netmask="255.255.255.0"
+  
+      uci set network.wifi=interface
+      uci set network.wifi.ifname=wlan1
+      uci set network.wifi.proto=dhcp
+      uci set network.wifi.hostname=$RELEASE
+      
+      uci set network.usb=interface
+      uci set network.usb.ifname=usb0
+      uci set network.usb.proto=dhcp
+      uci set network.usb.hostname=$RELEASE
+  
+      uci set wireless.@wifi-iface[1].wds=0
+  
+      ## set dhcp
+      uci delete dhcp.wan
+  
+      uci set dhcp.lan.ignore=0
+      uci set dhcp.wifi.ignore=1
+  
+      ## set multiwan
+      #uci delete multiwan.wifi
+      #uci delete multiwan.wan
+  
+      #uci set multiwan.wifi=interface
+      #uci set multiwan.wifi.weight=10
+      #uci set multiwan.wifi.health_interval=10
+      #uci set multiwan.wifi.icmp_hosts=dns
+      #uci set multiwan.wifi.timeout=3
+      #uci set multiwan.wifi.health_fail_retries=3
+      #uci set multiwan.wifi.health_recovery_retries=5
+      #uci set multiwan.wifi.failover_to=disabled
+      #uci set multiwan.wifi.dns=auto
+
+      uci commit
+      ;;
+  
+      2) ## wlan0 as lan, eth0, wlan1 and usb0 as three wans
+  
+      ## set network
+      uci delete network.lan
+      uci delete network.wan
+      uci delete network.wifi
+      uci delete network.usb
+  
+      uci set network.lan=interface
+      uci set network.lan.ifname="wlan0"
+      uci set network.lan.proto=static
+      uci set network.lan.ipaddr=$AP_ADDR
+      uci set network.lan.netmask="255.255.255.0"
+  
+  
+      uci set network.wan=interface
+      uci set network.wan.ifname=eth0
+      uci set network.wan.proto=dhcp
+      uci set network.wan.hostname=$RELEASE
+  
+  
+      uci set network.wifi=interface
+      uci set network.wifi.ifname=wlan1
+      uci set network.wifi.proto=dhcp
+      uci set network.wifi.hostname=$RELEASE
+     
+      uci set network.usb=interface
+      uci set network.usb.ifname=usb0
+      uci set network.usb.proto=dhcp
+      uci set network.usb.hostname=$RELEASE
+  
+      uci set wireless.@wifi-iface[1].wds=0
+  
+      ## set dhcp
+      uci set dhcp.lan.ignore=0
+      uci set dhcp.wifi.ignore=1
+  
+      uci delete dhcp.wan
+  
+      uci set dhcp.wan=dhcp
+      uci set dhcp.wan.interface=wan
+      uci set dhcp.wan.ignore=1
+  
+  
+      ## set multiwan
+      #uci delete multiwan.wifi
+      #uci delete multiwan.wan
+  
+      #uci set multiwan.wifi=interface
+      #uci set multiwan.wifi.weight=10
+      #uci set multiwan.wifi.health_interval=10
+      #uci set multiwan.wifi.icmp_hosts=dns
+      #uci set multiwan.wifi.timeout=3
+      #uci set multiwan.wifi.health_fail_retries=3
+      #uci set multiwan.wifi.health_recovery_retries=5
+      #uci set multiwan.wifi.failover_to=disabled
+      #uci set multiwan.wifi.dns=auto
+  
+  
+      #uci set multiwan.wan=interface
+      #uci set multiwan.wan.weight=10
+      #uci set multiwan.wan.health_interval=10
+      #uci set multiwan.wan.icmp_hosts=dns
+      #uci set multiwan.wan.timeout=3
+      #uci set multiwan.wan.health_fail_retries=3
+      #uci set multiwan.wan.health_recovery_retries=5
+      #uci set multiwan.wan.failover_to=disabled
+      #uci set multiwan.wan.dns=auto
+  
+      uci commit
+      ;;
+  
+      3) ## wlan0 as lan, eth0, wlan1 in WDS mode and usb0 as 2 wans
+  
+      ## set network
+      uci delete network.lan
+      uci delete network.wan
+      uci delete network.wifi
+      uci delete network.usb
+  
+      uci set network.lan=interface
+      uci set network.lan.ifname="wlan0"
+      uci set network.lan.proto=static
+      uci set network.lan.ipaddr=$AP_ADDR
+      uci set network.lan.netmask="255.255.255.0"
+  
+  
+      uci set network.wifi=interface
+      uci set network.wifi.ifname="eth0 wlan1"
+      uci set network.wifi.type=bridge
+      uci set network.wifi.proto=dhcp
+      uci set network.wifi.hostname=$RELEASE
+
+      uci set network.usb=interface
+      uci set network.usb.ifname=usb0
+      uci set network.usb.proto=dhcp
+      uci set network.usb.hostname=$RELEASE
+  
+      uci set wireless.@wifi-iface[1].wds=1
+  
+      ## set dhcp
+      uci set dhcp.lan.ignore=0
+      uci set dhcp.wifi.ignore=1
+  
+      uci delete dhcp.wan
+  
+  
+  
+      ## set multiwan
+      #uci delete multiwan.wifi
+      #uci delete multiwan.wan
+  
+      #uci set multiwan.wifi=interface
+      #uci set multiwan.wifi.weight=10
+      #uci set multiwan.wifi.health_interval=10
+      #uci set multiwan.wifi.icmp_hosts=dns
+      #uci set multiwan.wifi.timeout=3
+      #uci set multiwan.wifi.health_fail_retries=3
+      #uci set multiwan.wifi.health_recovery_retries=5
+      #uci set multiwan.wifi.failover_to=disabled
+      #uci set multiwan.wifi.dns=auto
+  
+  
+      uci commit
+      ;;
+
+      *)
+       changes=$(uci changes)
+       if [ "$changes" != "" ]; then
+         uci commit
+       fi
+      ;;
+  
+  esac
+}
+
+set_multiwan() {
+	local ifc="$1"
+	local address="$2"
+	local interface="$3"
+	local gateway="$4"
+	local metric="$5"" ""$6"
+	local table
+        local nexthop_opt=""
+	case $ifc in
+		usb) table=170;;
+		wan) table=171;;
+		wifi) table=172;;
+	esac
+	if [ "$table" != "" ] && [ "$gateway" != "" ]; then
+		ip route flush table $table
+		ip route add default via $gateway dev $interface proto static src $address table $table
+		for line in $(ip route show | grep -v default | grep -v nexthop | grep $interface | awk -v table=$table '{print "ip|route|add|"$1"|"$2"|"$3"|"$4"|"$5"|"$6"|"$7"|"$8"|"$9"|table|"table}'); do
+			cmd=$(echo $line | sed -e "s/|/ /g")
+			sh -c "$cmd"
+		done
+		for line in $(ip rule show | awk -F":" '{print $2}' | grep  "lookup $table" | awk '{print "ip|rule|del|"$1"|"$2"|"$3"|"$4}'); do
+			cmd=$(echo $line | sed -e "s/|/ /g")
+			sh -c "$cmd"
+		done
+		ip rule add from $address table $table prio $table
+		ip route del default
+		for network in usb wan wifi; do
+			nexthop_gateway=$(uci -p/var/state get network."$network".lease_gateway 2>/dev/null)
+			nexthop_interface=$(uci -p/var/state get network."$network".device 2>/dev/null)
+			interface_exist=$(grep $nexthop_interface /proc/net/dev)
+			if [ "$nexthop_gateway" != "" ] && [ "$interface_exist" != "" ]; then
+				nexthop_opt="$nexthop_opt nexthop via $nexthop_gateway dev $nexthop_interface weight 1 $metric"
+			fi
+		done
+		if [ "$nexthop_opt" != "" ]; then
+			ip route add default scope global $nexthop_opt
+			echo 30 > /proc/sys/net/ipv4/route/gc_timeout
+		else
+			for network in "usb" "wan" "wifi"; do
+				network_gateway=$(uci -p/var/state get network."$network".lease_gateway 2>/dev/null )
+				network_interface=$(uci -p/var/state get network."$network".device 2>/dev/null)
+				interface_exist=$(grep $network_interface /proc/net/dev)
+				if [ "$network_gateway" != "" ] && [ "$interface_exist" != "" ]; then
+					ip route add default via $network_gateway dev $network_interface $metric
+				fi
+			done
+		fi 
+		ip route flush cache
+	fi
+		
+
+	
+}
+
+scan_dns() {
+local RESOLV_CONF="$1"
+	for network in usb wan wifi; do
+		dns_entry=$(uci -p/var/state get network."$network".dns 2>/dev/null)
+		domain_entry=$(uci -p/var/state get network."$network".dnsdomain 2>/dev/null)
+		[ -n "$dns_entry" ] && old_dns=$(grep ^"nameserver $dns_entry"$ "$RESOLV_CONF")
+		[ -n "$domain_entry" ] && old_domain=$(grep ^"search $domain_entry"$ "$RESOLV_CONF")
+		if [ "$old_dns" == "" ] && [ "$dns_entry" != "" ]; then
+			echo "nameserver $dns_entry" >> "$RESOLV_CONF"
+		fi
+		if [ "$old_domain" == "" ] && [ "$domain_entry" != "" ]; then
+			echo "search $domain_entry" >> "$RESOLV_CONF"
+		fi
+	done
+}
+
+scan_route() {
+multiwan_enable=$(uci get powertools.@system[0].multiwan)
+if [ "$multiwan_enable" == "1" ]; then
+	for network in usb wan wifi; do
+		nexthop_gateway=$(uci -p/var/state get network."$network".gateway 2>/dev/null)
+		nexthop_interface=$(uci -p/var/state get network."$network".device 2>/dev/null)
+		interface_exist=$(grep $nexthop_interface /proc/net/dev)
+		if [ "$nexthop_gateway" != "" ] && [ "$interface_exist" != "" ]; then
+			nexthop_opt="$nexthop_opt nexthop via $nexthop_gateway dev $nexthop_interface weight 1"
+		fi
+	done
+	if [ "$nexthop_opt" != "" ]; then
+		ip route add default scope global $nexthop_opt
+		echo 30 > /proc/sys/net/ipv4/route/gc_timeout
+	fi
+else
+	for network in usb wan wifi; do
+		network_gateway=$(uci -p/var/state get network."$network".gateway 2>/dev/null)
+		network_interface=$(uci -p/var/state get network."$network".device 2>/dev/null)
+		interface_exist=$(grep $network_interface /proc/net/dev)
+		if [ "$network_gateway" != "" ] && [ "$interface_exist" != "" ]; then
+			ip route add default via $network_gateway dev $network_interface
+		fi
+	done
+fi
+}
Index: package/base-files/files/etc/init.d/boot
===================================================================
--- package/base-files/files/etc/init.d/boot	(revision 28854)
+++ package/base-files/files/etc/init.d/boot	(working copy)
@@ -67,7 +67,29 @@
 	[ "$FAILSAFE" = "true" ] && touch /tmp/.failsafe
 
 	load_modules /etc/modules.d/*
-
+	
+	[ -d /tmp/root ] && {
+	sh -c '. /lib/network/networkmode.sh; switch_network_mode "auto"'
+	}
+	
+	[ -d /sys/class/net/wlan0 ] && {
+                wlan_mac_addr=$(cat /sys/class/net/wlan0/address)
+                if [ "$wlan_mac_addr" != "" ]; then
+			[ -d /tmp/root ] && {
+			uci set wireless.radio0.macaddr="$wlan_mac_addr"
+			RELEASE=$(uci get powertools.@system[0].release)
+			WIFI_UID=$(echo $wlan_mac_addr | awk -F':' '{print $5$6}')
+			case "$RELEASE" in
+			  nas)
+			    uci set wireless.@wifi-iface[0].ssid="NAS-$WIFI_UID" ;;
+			  pulseaudio)
+			    uci set wireless.@wifi-iface[0].ssid="PulseAudio-$WIFI_UID" ;;
+			  *)
+			    uci set wireless.@wifi-iface[0].ssid="OpenWrt-$WIFI_UID" ;;
+			esac
+			}
+                fi
+ 	}
 	/sbin/wifi detect > /tmp/wireless.tmp
 	[ -s /tmp/wireless.tmp ] && {
 		cat /tmp/wireless.tmp >> /etc/config/wireless
@@ -88,7 +110,7 @@
 	for iface in $(awk -F: '/:/ {print $1}' /proc/net/dev); do
 		/usr/bin/env -i ACTION=add INTERFACE="$iface" /sbin/hotplug-call net
 	done
-
+	
 	# create /dev/root if it doesn't exist
 	[ -e /dev/root -o -h /dev/root ] || {
 		rootdev=$(awk 'BEGIN { RS=" "; FS="="; } $1 == "root" { print $2 }' < /proc/cmdline)
Index: package/base-files/files/etc/init.d/firewall
===================================================================
--- package/base-files/files/etc/init.d/firewall	(revision 0)
+++ package/base-files/files/etc/init.d/firewall	(revision 0)
@@ -0,0 +1,50 @@
+#!/bin/sh /etc/rc.common
+# Copyright (C) 2006 OpenWrt.org 
+
+START=90
+start() {
+	[ -f /usr/sbin/iptables ] && {
+	
+	IPTABLES=/usr/sbin/iptables
+	$IPTABLES -F
+	$IPTABLES -F -t nat
+	$IPTABLES -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
+	$IPTABLES -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
+
+	$IPTABLES -P INPUT ACCEPT
+	$IPTABLES -P OUTPUT ACCEPT
+	$IPTABLES -P FORWARD ACCEPT
+	VPN_SERVER=$(uci get openvpn.server.server)
+	if [ "$VPN_SERVER" != "" ]; then
+	  eval "$(/bin/ipcalc.sh $VPN_SERVER)"
+	  VPN_NETWORK=$NETWORK
+	  VPN_PREFIX=$PREFIX
+	fi
+	LAN_IP=$(uci get network.lan.ipaddr)
+	LAN_NETMASK=$(uci get network.lan.netmask)
+	eval "$(/bin/ipcalc.sh $LAN_IP $LAN_NETMASK)"
+	for netif in wifi wan; do
+	  bridge_result=$(uci get network.$netif.type 2>/dev/null)
+	  interface=$(uci get network.$netif.ifname 2>/dev/null)
+	  if [ "$interface" != "" ]; then
+	    if [ "$bridge_result" != "bridge" ] ; then
+	    $IPTABLES -A POSTROUTING -t nat -o $interface -s $NETWORK/$PREFIX -j MASQUERADE
+	    if [ "$VPN_NETWORK" !=  "" ] && [ "$VPN_PREFIX" !=  "" ]; then
+	      $IPTABLES -A POSTROUTING -t nat -o $interface -s $VPN_NETWORK/$VPN_PREFIX -j MASQUERADE
+	    fi
+	    else
+	    $IPTABLES -A POSTROUTING -t nat -o br-$netif -s $NETWORK/$PREFIX -j MASQUERADE
+	    if [ "$VPN_NETWORK" !=  "" ] && [ "$VPN_PREFIX" !=  "" ]; then
+	      $IPTABLES -A POSTROUTING -t nat -o br-$netif -s $VPN_NETWORK/$VPN_PREFIX -j MASQUERADE
+	    fi
+	    fi
+	  fi
+	done
+	$IPTABLES -A POSTROUTING -t nat -o usb0 -s $NETWORK/$PREFIX -j MASQUERADE
+	if [ "$VPN_NETWORK" !=  "" ] && [ "$VPN_PREFIX" !=  "" ]; then
+	  $IPTABLES -A POSTROUTING -t nat -o usb0 -s $VPN_NETWORK/$VPN_PREFIX -j MASQUERADE
+	fi
+
+	echo 1 > /proc/sys/net/ipv4/ip_forward
+	}		
+}
Index: package/base-files/files/etc/init.d/nfs-mount
===================================================================
--- package/base-files/files/etc/init.d/nfs-mount	(revision 0)
+++ package/base-files/files/etc/init.d/nfs-mount	(revision 0)
@@ -0,0 +1,85 @@
+#!/bin/sh /etc/rc.common
+# Copyright (C) 2006 OpenWrt.org 
+
+START=999
+STOP=50
+start() {
+	[ ! -d /mnt/nfs ] && {
+	mkdir -p /mnt/nfs
+	}
+	/bin/mount -t nfs -o nolock 192.168.0.6:/media/openwrt /mnt/nfs
+	RETVAL=$?
+	[ "$RETVAL" == 0 ] && {
+		[ -d /mnt/nfs/etc/config ] && {
+			cd /mnt/nfs/etc/config
+			for file in * ; do
+				[ -f /mnt/nfs/etc/config/$file ] && {
+					[ ! -f /etc/config/$file ] && {
+						ln -s /mnt/nfs/etc/config/$file /etc/config/$file
+					}
+				}	
+			done
+		}	
+		
+		[ -d /mnt/nfs/usr/share ] && {
+			cd /mnt/nfs/usr/share
+			for folder in * ; do
+				[ -d /mnt/nfs/usr/share/$folder ] && {
+					[ ! -d /usr/share/$folder ] && {
+						ln -s /mnt/nfs/usr/share/$folder /usr/share/$folder
+					}
+				}
+			done
+		}
+		
+		[ -d /mnt/nfs/usr/lib ] && {
+                        cd /mnt/nfs/usr/lib
+                        for folder in * ; do
+                                [ -d /mnt/nfs/usr/lib/$folder ] && {
+                                        [ ! -d /usr/lib/$folder ] && {
+                                                ln -s /mnt/nfs/usr/lib/$folder /usr/lib/$folder
+                                        }
+                                }
+			done
+                }
+		
+		[ -f /mnt/nfs/usr/bin/webifmetabin ] && {
+			for applet in  `/mnt/nfs/usr/bin/webifmetabin | grep -v ERROR | grep -v Applets` ; do
+				[ ! -f /usr/bin/$applet ] && {
+					ln -s /mnt/nfs/usr/bin/webifmetabin /usr/bin/$applet
+				}	
+			done
+		}
+
+		[ ! -d /overlay/www ] && {
+			rm -rf /www
+			ln -s /tmp/www /www
+		}
+	
+		[ -d /tmp/www ] && {
+			rm -rf /tmp/www
+		}
+
+		[ -d /mnt/nfs/www ] && {
+			ln -s /mnt/nfs/www /tmp/www
+		}
+		
+	}
+	
+	
+	[ -d /tmp/www ] && {
+		rm -rf /tmp/www
+	}
+		
+	[ -d /mnt/nfs/www ] && {
+		ln -s /mnt/nfs/www /tmp/www
+	}
+}
+
+stop() {
+
+ps | grep /mnt/nfs | grep -v grep | awk '{print $1}' | xargs kill -9 
+
+umount /mnt/nfs
+
+}
Index: package/base-files/files/etc/profile
===================================================================
--- package/base-files/files/etc/profile	(revision 28854)
+++ package/base-files/files/etc/profile	(working copy)
@@ -1,11 +1,17 @@
 #!/bin/sh
 [ -f /etc/banner ] && cat /etc/banner
 
-export PATH=/bin:/sbin:/usr/bin:/usr/sbin
+export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/mnt/nfs/bin:/mnt/nfs/sbin:/mnt/nfs/usr/bin:/mnt/nfs/usr/sbin
+export LD_LIBRARY_PATH=/mnt/nfs/lib:/mnt/nfs/usr/lib
 export HOME=$(grep -e "^${USER:-root}:" /etc/passwd | cut -d ":" -f 6)
-export HOME=${HOME:-/root}
 export PS1='\u@\h:\w\$ '
 
+alias pactl="env HOME=/tmp pactl"
+
+export GST_PLUGIN_PATH=/usr/lib/gstreamer-0.10
+export GST_REGISTRY_UPDATE=1
+export GST_REGISTRY=/mnt/nfs/gst-reg.bin
+
 [ -x /bin/more ] || alias more=less
 [ -x /usr/bin/vim ] && alias vi=vim || alias vim=vi
 
Index: package/base-files/files/etc/passwd
===================================================================
--- package/base-files/files/etc/passwd	(revision 28854)
+++ package/base-files/files/etc/passwd	(working copy)
@@ -1,4 +1,4 @@
-root:!:0:0:root:/root:/bin/ash
+root:N5qwumV45lf5I:0:0:root:/root:/bin/ash
 daemon:*:1:1:daemon:/var:/bin/false
 ftp:*:55:55:ftp:/home/ftp:/bin/false
 network:*:101:101:network:/var:/bin/false
Index: package/base-files/files/etc/hotplug.d/input/20-pulseaudio
===================================================================
--- package/base-files/files/etc/hotplug.d/input/20-pulseaudio	(revision 0)
+++ package/base-files/files/etc/hotplug.d/input/20-pulseaudio	(revision 0)
@@ -0,0 +1,39 @@
+#!/bin/sh
+
+# Copyright (C) 2009 OpenWrt.org
+
+case "$ACTION" in
+	add)
+		export HOME=/tmp
+		
+		PID=$(pidof pulseaudio)
+		EVENT_DEVICE=$(echo $DEVICENAME | grep ^event )
+		if [ "$EVENT_DEVICE" != "" ]; then
+		  if [ "$PID" != "" ]; then
+		    pactl load-module module-mmkbd-evdev device=/dev/input/$DEVICENAME
+		  fi
+		fi
+		;;
+	remove)
+		export HOME=/tmp
+		
+		PID=$(pidof pulseaudio)
+		EVENT_DEVICE=$(echo $DEVICENAME | grep ^event )
+		if [ "$EVENT_DEVICE" != "" ]; then
+		  if [ "$PID" != "" ]; then
+		    PULSE_MODULE_ID=$(pactl list short modules | grep module-mmkbd-evdev | grep device=/dev/input/$DEVICENAME | awk '{print $1}')
+		    if [ "$PULSE_MODULE_ID" != "" ]; then
+		      pactl unload-module $PULSE_MODULE_ID
+		    fi
+		  fi
+		fi
+		sleep 2
+		PID=$(pidof pulseaudio)
+		if [ "$PID" == "" ]; then
+		/etc/init.d/pulseaudio start
+		fi
+		
+		
+		;;
+esac	
+		
Index: package/base-files/files/etc/hotplug.d/sound/20-pulseaudio
===================================================================
--- package/base-files/files/etc/hotplug.d/sound/20-pulseaudio	(revision 0)
+++ package/base-files/files/etc/hotplug.d/sound/20-pulseaudio	(revision 0)
@@ -0,0 +1,64 @@
+#!/bin/sh
+
+# Copyright (C) 2009 OpenWrt.org
+
+case "$ACTION" in
+	add)
+		export HOME=/tmp
+		
+		PID=$(pidof pulseaudio)
+		if [ "$PID" == "" ]; then
+		/etc/init.d/pulseaudio start
+		sleep 5
+		fi
+		
+		DEVICE_ID=$(echo $DEVICENAME | sed -e "s/card//")
+		
+		MIXER=$(amixer | grep "mixer control" | grep "$DEVICE_ID"$ | cut -f2 -d"'")
+		/usr/bin/amixer set $MIXER 100% unmute > /dev/null 2>&1
+		
+		ratelist=$(grep Rates /proc/asound/$DEVICENAME/stream0 | head -n 1  | cut -f2 -d ":" | sed -e "s/,//g")
+		for rate in $ratelist ; do
+		    if [ "$rate" == "44100" ]; then
+		        FFK=1
+		    fi
+		done
+		PULSE_MODULE_ID=$(pactl list short modules | grep module-alsa-sink | grep sink_name=$DEVICENAME | awk '{print $1}')
+		if [ "$PULSE_MODULE_ID" == "" ]; then
+		  if [ "$FFK" == 1 ]; then
+		    pactl load-module module-alsa-sink tsched=0 rate=44100 device=plughw:$DEVICE_ID sink_name=$DEVICENAME
+		  else
+		    pactl load-module module-alsa-sink tsched=0 rate=$rate device=plughw:$DEVICE_ID sink_name=$DEVICENAME
+		  fi
+		fi
+
+                PULSE_MODULE_ID=$(pactl list short modules | grep module-switch-on-connect | awk '{print $1}')
+                if  [ "$PULSE_MODULE_ID" != "" ]; then
+                  pactl unload-module $PULSE_MODULE_ID
+                fi
+
+		for sink in palerts pnotifications pfeedback pringtones pmedia pflash pnavigation pvoicedial pvoip pdefaultapp peffects pDTMF pcalendar palarm pvvm ; do
+                  PULSE_MODULE_ID=$(pactl list short modules | grep module-remap-sink | grep sink_name=$sink | awk '{print $1}')
+                  if  [ "$PULSE_MODULE_ID" != "" ]; then
+                    pactl unload-module $PULSE_MODULE_ID
+                  fi
+
+                  pactl load-module module-remap-sink sink_name=$sink master=$DEVICENAME channels=2 master_channel_map=front-left,front-right channel_map=front-left,front-right
+                done
+
+                pactl load-module module-switch-on-connect
+		;;
+	remove)
+		export HOME=/tmp
+		
+		PID=$(pidof pulseaudio)
+		if [ "$PID" != "" ]; then
+		    PULSE_MODULE_ID=$(pactl list short modules | grep module-alsa-sink | grep sink_name=$DEVICENAME | awk '{print $1}')
+		    if [ "$PULSE_MODULE_ID" != "" ]; then
+		        pactl unload-module $PULSE_MODULE_ID
+		    fi
+		fi
+		
+		;;
+esac	
+		
Index: package/base-files/files/etc/hotplug.d/usb/30-printer
===================================================================
--- package/base-files/files/etc/hotplug.d/usb/30-printer	(revision 0)
+++ package/base-files/files/etc/hotplug.d/usb/30-printer	(revision 0)
@@ -0,0 +1,29 @@
+#!/bin/sh
+
+# Copyright (C) 2009 OpenWrt.org
+
+vendor=$(echo $PRODUCT | awk -F'/' '{print "000" $1}' | awk '{ print substr( $0, length($0) - 3, length($0) ) }' )
+prodid=$(echo $PRODUCT | awk -F'/' '{print "000"$2}' | awk '{ print substr( $0, length($0) - 3, length($0) ) }' )
+
+lp_dev="Vendor=$vendor ProdID=$prodid"
+lp_dev_exist=$(grep $lp_dev /proc/bus/usb/devices 2>/dev/null)
+if [ "$lp_dev" != "" ]; then
+IF=$(grep "$lp_dev" -A5 /proc/bus/usb/devices | tail -n 1  | grep "usblp" | awk '{print $3}')
+  if  [ "$IF" != "" ]; then
+  DEVICENAME=usblp$IF
+  fi
+fi
+case "$ACTION" in
+	add)
+		case $DEVICENAME in
+		usblp*)
+		/etc/init.d/p910nd stop
+		sleep 1
+		/etc/init.d/p910nd start
+		;;
+		esac
+		;;
+	remove)
+		;;
+esac	
+		
Index: package/base-files/files/etc/config/powertools
===================================================================
--- package/base-files/files/etc/config/powertools	(revision 0)
+++ package/base-files/files/etc/config/powertools	(revision 0)
@@ -0,0 +1,8 @@
+
+config 'system'
+	option 'address' '172.16.10.1'
+	option 'release' 'pulseaudio'
+	option 'mode' '1'
+	option 'version' '28854-1229'
+	option 'multiwan' '1'
+
